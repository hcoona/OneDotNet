trigger: none

pr:
- main

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
      osSuffix: 'linux'
    windows:
      imageName: 'windows-latest'
      osSuffix: 'windows'

pool:
  vmImage: $(imageName)

variables:
  buildConfiguration: 'Debug'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

steps:
- checkout: self
  clean: true
  persistCredentials: true

# Checkout Git-LFS if necessary in the future.
# Note that we need to save Git-LFS bandwidth so currently we disabled it.
# Consider to use a separate Git-LFS storage than the one in GitHub.
- powershell: |
    git lfs ls-files
  displayName: "List Git-LFS files"

- task: UseDotNet@2
  displayName: 'Install DotNet SDK'
  inputs:
    useGlobalJson: true

- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . nbgv
  displayName: Install NBGV tool

- script: nbgv cloud
  displayName: Set Version

- task: Cache@2
  displayName: 'Restore nuget cache'
  inputs:
    key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
    restoreKeys: |
      nuget | "$(Agent.OS)"
      nuget
    path: '$(NUGET_PACKAGES)'
    cacheHitVar: 'CACHE_RESTORED'

- task: DotNetCoreCLI@2
  displayName: 'Build projects'
  inputs:
    command: 'build'
    projects: 'dirs.proj'
    arguments: '-c $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Test projects'
  inputs:
    command: 'test'
    projects: 'dirs.proj'
    arguments: '-c $(buildConfiguration)'

- task: PublishPipelineArtifact@1
  displayName: 'Publish artifacts'
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/artifacts
    artifactName: OneDotNet-$(osSuffix)
