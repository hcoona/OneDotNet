parameters:
- name: isOfficial
  type: boolean
  default: false
- name: packProjects
  type: boolean
  default: false
- name: projects
  type: string
  default: dirs.proj

steps:
- checkout: self
  clean: true
  fetchDepth: -1
  persistCredentials: true

# Checkout Git-LFS if necessary in the future.
# Note that we need to save Git-LFS bandwidth so currently we disabled it.
# Consider to use a separate Git-LFS storage than the one in GitHub.
- script: |
    git lfs ls-files
  displayName: "List Git-LFS files"

- task: UseDotNet@2.207.2
  displayName: 'Install DotNet SDK'
  inputs:
    useGlobalJson: true

- task: DotNetCoreCLI@2.210.0
  displayName: Install NBGV tool
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path $(Agent.ToolsDirectory) nbgv

- script: $(Agent.ToolsDirectory)/nbgv cloud -a -p ./Clocks.Net
  displayName: NBGV set environment variables

- task: Cache@2.198.0
  displayName: 'Restore nuget cache'
  inputs:
    key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
    restoreKeys: |
      nuget | "$(Agent.OS)"
      nuget
    path: '$(NUGET_PACKAGES)'
    cacheHitVar: 'CACHE_RESTORED'

- task: DotNetCoreCLI@2.210.0
  displayName: 'Build projects'
  inputs:
    command: 'build'
    projects: '${{ parameters.projects }}'
    arguments: '-c $(buildConfiguration)'
    buildProperties: 'PublicRelease=${{ parameters.isOfficial }}'

- task: DotNetCoreCLI@2.210.0
  displayName: 'Test projects'
  inputs:
    command: 'test'
    projects: '${{ parameters.projects }}'
    arguments: '--no-restore --no-build -c $(buildConfiguration) --collect "Code coverage"'
    publishTestResults: $(isWindows)

- task: DotNetCoreCLI@2.210.0
  displayName: 'Pack projects'
  condition: and(succeeded(), eq('${{ parameters.packProjects }}', 'true'), eq(variables['isWindows'], 'true'))
  inputs:
    command: 'pack'
    packagesToPack: '${{ parameters.projects }}'
    configuration: '$(buildConfiguration)'
    packDirectory: $(System.DefaultWorkingDirectory)/artifacts/packages
    nobuild: true
    buildProperties: 'PublicRelease=${{ parameters.isOfficial }}'

- task: PublishPipelineArtifact@1.199.0
  displayName: 'Publish artifacts'
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/artifacts
    artifactName: OneDotNet-$(osSuffix)
