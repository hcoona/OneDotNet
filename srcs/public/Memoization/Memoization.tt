<#
// Copyright (c) 2022 Zhang Shuai<zhangshuai.ustc@gmail.com>.
// All rights reserved.
//
// This file is part of OneDotNet.
//
// OneDotNet is free software: you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
//
// OneDotNet is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU General Public License along with
// OneDotNet. If not, see <https://www.gnu.org/licenses/>.
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Copyright (c) 2022 Zhang Shuai<zhangshuai.ustc@gmail.com>.
// All rights reserved.
//
// This file is part of OneDotNet.
//
// OneDotNet is free software: you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
//
// OneDotNet is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU General Public License along with
// OneDotNet. If not, see <https://www.gnu.org/licenses/>.

using System;
using System.Diagnostics;
using Microsoft.Extensions.Caching.Memory;

namespace Memoization
{
    public static partial class Memoization
    {
<# for (int i = 0; i < 16; i++) { #>
<#
var inputTypes = string.Join(", ", Enumerable.Range(1, i + 1).Select(idx => $"T{idx}"));
var inputTypeWithParams = string.Join(", ", Enumerable.Range(1, i + 1).Select(idx => $"T{idx} t{idx}"));
var inputParams = string.Join(", ", Enumerable.Range(1, i + 1).Select(idx => $"t{idx}"));
#>
        [DebuggerStepThrough]
        public static Func<<#= inputTypes #>, TResult> Create<<#= inputTypes #>, TResult>(Func<<#= inputTypes #>, TResult> func)
        {
            return Create(func, DefaultCache ?? throw new InvalidOperationException("Memoization.DefaultCache is null"));
        }

        [DebuggerStepThrough]
        public static Func<<#= inputTypes #>, TResult> Create<<#= inputTypes #>, TResult>(Func<<#= inputTypes #>, TResult> func, MemoryCacheEntryOptions options)
        {
            return Create(func, DefaultCache ?? throw new InvalidOperationException("Memoization.DefaultCache is null"), options);
        }

        public static Func<<#= inputTypes #>, TResult> Create<<#= inputTypes #>, TResult>(Func<<#= inputTypes #>, TResult> func, IMemoryCache cache)
        {
            return (<#= inputTypeWithParams #>) => cache.GetOrCreate((<#= inputParams #>), ignored => func(<#= inputParams #>));
        }

        public static Func<<#= inputTypes #>, TResult> Create<<#= inputTypes #>, TResult>(Func<<#= inputTypes #>, TResult> func, IMemoryCache cache, MemoryCacheEntryOptions options)
        {
            return (<#= inputTypeWithParams #>) =>
            {
                var key = (<#= inputParams #>);
                if (!cache.TryGetValue<TResult>(key, out var result))
                {
                    var entry = cache.CreateEntry(key);
                    result = func(<#= inputParams #>);
                    entry.SetOptions(options);
                    entry.SetValue(result);

                    // need to manually call dispose instead of having a using
                    // in case the factory passed in throws, in which case we
                    // do not want to add the entry to the cache
                    entry.Dispose();
                }

                return result;
            };
        }
<# if (i != 15) { #>

<# } #>
<# } #>
    }
}
